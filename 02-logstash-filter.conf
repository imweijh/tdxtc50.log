filter {
  if [tdxtype] == "tdxsec"{
    grok {
      match => ["message","^%{DATA:logtime} %{DATA:reqstr} 通道ID:%{DATA:tdid} 连接信息:%{DATA:clientip}(,%{DATA:port})? 操作机构:%{DATA:yybname} 操作帐号:%{DATA:loginid} %{DATA:connectioninf} 原因:%{GREEDYDATA:msg}$"]
      match => ["message","^%{DATA:logtime} %{DATA:reqstr} 通道ID:%{DATA:tdid} 连接信息:%{DATA:clientip} 操作机构:%{DATA:yybname} 操作帐号:%{DATA:loginid} 原因:%{GREEDYDATA:msg}$"]
      match => ["message","^%{DATA:logtime} %{DATA:reqstr} 连接地址:%{DATA:clientip} 操作机构:%{DATA:yybname} 操作帐号:%{DATA:loginid}$"]
      match => ["message","^%{DATA:logtime} %{DATA:reqstr} 客户IP:%{DATA:clientip} 客户机构:%{DATA:yybname} 客户帐号:%{DATA:loginid}$"]
      match => ["message","^%{DATA:logtime} %{DATA:reqstr} 客户MAC:%{DATA:clientip} 客户机构:%{DATA:yybname} 客户帐号:%{DATA:loginid}$"]
      match => ["message","^%{DATA:logtime} %{DATA:reqstr} 连接信息:%{DATA:clientip},%{DATA:port} %{DATA:msg}$"]
    }
    # filebeat字段 "source" => "D:\\tdx\\tdxtc50_期信\\log\\20170306.sec" 从中取日期
    if [source] {
      grok {
        match => ["source","%{DATA}%{NUMBER:logdate}.sec$"]
        tag_on_failure => [ "_grokfailure-logdate"]
        add_field => {"localtime" => "%{logdate} %{logtime}"}
      }
    } else if [logtime] {
      mutate {
        # this will only work on logs created the same day as read
        add_field => {"logdate" => "%{+YYYYMMdd}"}
        # merge with existing time field
        add_field => {"localtime" => "%{logdate} %{logtime}"}
      }
    } # end if
    date {
      match => [ "localtime", "YYYYMMdd HH:mm:ss.SSS" ]
    } # set event's @timestamp
    mutate {
      remove_field => [ "input_type","offset","logdate","logtime","etimeB" ]
      remove_tag => [ "beats_input_codec_plain_applied" ]
    }
  } else { # tdxlog begin
  mutate {
    gsub => ['message', "\n", " "]
    gsub => ['message', "\r", ""]
  }

  grok {
    match => ["message","^%{TIME:logtime} %{DATA:logwhat} %{GREEDYDATA:msg}$" ]
    # match => ["message","^%{TIME:logtime} %{DATA:logwhat} IP:%{IP:clientip} MAC:%{DATA:mac} 线程:%{DATA:xiancheng} 通道ID:%{INT:tdid} 事务ID:%{INT:swid} 请求:%{DATA:reqstr} 营业部:\(%{INT:yybid}\)%{DATA:yybname} 耗时A:%{INT:etime:int} 耗时B:%{INT:etimeB:int} 排队:%{INT:pdtime:int} %{GREEDYDATA:msg}$" ]
    # match => ["message","^%{TIME:logtime} %{DATA:logwhat} IP:%{IP:clientip} MAC:%{DATA:mac} 线程:%{DATA:xiancheng} 通道ID:%{INT:tdid} 事务ID:%{INT:swid} 请求:%{DATA:reqstr} 营业部:\(%{INT:yybid}\)%{DATA:yybname} %{GREEDYDATA:msg}$" ]
    # match => ["message","^%{TIME:logtime} %{DATA:logwhat} 通道ID:%{INT:tdid} 连接信息:%{IP:clientip} 操作机构:%{DATA:yybname} 操作帐号:%{INT:customer} 原因:%{GREEDYDATA:msg}$" ]
  }
  
  # tc50日志有时会乱，故drop非已知日志。注意：当调试或通达信新增日志类型的情况，可能把正常日志删除！
  if [logwhat] not in ["连接断开","连接建立","功能请求","成功处理","调用失败","协议异常","系统信息","系统错误","通讯关闭"] {
    # mutate { add_tag => "invalidlog" }
    drop{}
  }

  # filebeat字段 "source" => "D:\\tdx\\tdxtc50_期信\\log\\20170306.log" 从中取日期
  if [source] {
    grok {
      match => ["source","%{DATA}%{NUMBER:logdate}.log$"]
      tag_on_failure => [ "_grokfailure-logdate"]
      add_field => {"localtime" => "%{logdate} %{logtime}"}
    }
  } else if [logtime] {
    mutate {
      # this will only work on logs created the same day as read
      add_field => {"logdate" => "%{+YYYYMMdd}"}
      # merge with existing time field
      add_field => {"localtime" => "%{logdate} %{logtime}"}
    }
  } # end if
  
  date {
    match => [ "localtime", "YYYYMMdd HH:mm:ss.SSS" ]
  } # set event's @timestamp

  # 共八类logwhat: 系统信息 系统错误 连接建立 连接断开 功能请求 成功处理 调用失败 协议异常
  if [logwhat] in ["系统信息","系统错误"] {
    if [msg] =~ /^AntiMalware/ {
      grok {
        match => ["msg","^%{DATA:reqstr}: 检查到客户\(%{DATA:loginid}\)%{GREEDYDATA},来源接入地址\(%{DATA:clientip}\),%{GREEDYDATA:msg}$"]
        overwrite => [ "msg" ]
        tag_on_failure => [ "_grokfail_antimalware"]
      }
    }
    if [msg] =~ /^NodeGuard/ {
      grok {
        match => ["msg","^%{DATA:reqstr}: 检查到客户\(%{DATA:loginid}\)%{GREEDYDATA},来源接入地址\(%{DATA:clientip}\),策略编号\(%{DATA}-MAC:%{DATA:mac}-%{DATA:eventid}\),%{GREEDYDATA:msg}$"]
        match => ["msg","^%{DATA:reqstr}: 检查到客户\(%{DATA:loginid}\)%{GREEDYDATA},事件内容\(MAC:%{DATA:mac}-IP:%{DATA:clientip}-%{DATA:eventid}\),%{GREEDYDATA:msg}$"]
        match => ["msg","^%{DATA:reqstr}: 检查到客户\(%{DATA:loginid}\)%{GREEDYDATA},事件内容\(MAC:%{DATA:mac}-%{DATA:eventid}\),%{GREEDYDATA:msg}$"]
        overwrite => [ "msg" ]
        tag_on_failure => [ "_grokfail_nodeguard"]
      }
    }
    if [msg] =~ /^XGuard/ {
      grok {
        match => ["msg","^%{DATA:reqstr}: 检查到客户\(%{DATA:loginid}\)%{GREEDYDATA},来源接入地址\(%{DATA:clientip}\),%{GREEDYDATA:msg}$"]
        overwrite => [ "msg" ]
        tag_on_failure => [ "_grokfail_xguard"]
      }
    }
    if [msg] =~ /^总错误速度/ {
      grok {
        match => ["msg","^%{DATA:reqstr}: 客户\(%{DATA:loginid}\)%{GREEDYDATA},来源接入地址\(%{DATA:clientip}\)%{GREEDYDATA}$"]
        tag_on_failure => [ "_grokfail_errblock"]
      }
    }
  } else if [logwhat] == "连接建立" {
    drop{} # 直接删掉
    grok {
      match => ["msg","^通道ID:%{DATA:tdid} 连接信息:%{IP:clientip}" ]
      remove_field => [ "msg","message" ]
      #tag_on_failure => [ "_grokfail_ljjl"]
    }
  } else if [logwhat] == "连接断开" {
    drop{} # 直接删掉
    grok { # 最后的\[是截断异常日志
      match => ["msg","^通道ID:%{DATA:tdid} 连接信息:%{IP:clientip} 操作机构:%{DATA:yybname} 操作帐号:%{DATA:loginid} 原因:%{NOTSPACE:msg}\[" ]
      overwrite => [ "msg" ]
      remove_field => ["message"]
      #tag_on_failure => [ "_grokfail_ljdk"]
    }
  } else if [logwhat] == "功能请求" {
    grok {
      # match => ["msg","^IP:%{IP:clientip} MAC:%{DATA:mac} 线程:%{DATA:xiancheng} 通道ID:%{INT:tdid} 事务ID:%{INT:swid} 请求:%{DATA:reqstr} 营业部:\(%{INT:yybid}\)%{DATA:yybname} %{GREEDYDATA:msg}$" ]
      match => ["msg","^IP:%{IP:clientip} MAC:%{NOTSPACE:mac} 线程:%{NOTSPACE:xiancheng} 通道ID:%{INT:tdid} 事务ID:%{INT:swid} 请求:%{NOTSPACE:reqstr} 营业部:\(%{INT:yybid}\)%{DATA:yybname} %{GREEDYDATA:msg}$" ]
      overwrite => [ "msg" ]
    }
    
    if [reqstr] == "(0-98)集成客户校验(*)" {
      grok {
        match => ["msg","^来源:%{DATA} %{DATA:loginid}\|%{DATA}\|%{DATA}\|%{DATA:logintype}\|%{DATA}\|%{DATA}\|%{DATA:clitype}\|%{DATA:cliver:float}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|(?:%{DATA:innerip};%{DATA:pcname};%{DATA:osusername};%{DATA:memsize};%{DATA:cpuname};%{DATA:cpuid};%{DATA:osname};%{DATA:iplist};%{DATA:maclist};%{DATA:hdid};%{DATA:biosver};%{DATA:tdxguid};)?%{GREEDYDATA:other}$" ]
        match => ["msg","^%{DATA:loginid}\|%{DATA}\|%{DATA}\|%{DATA:logintype}\|%{DATA}\|%{DATA}\|%{DATA:clitype}\|%{DATA:cliver:float}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|(?:%{DATA:innerip};%{DATA:pcname};%{DATA:osusername};%{DATA:memsize};%{DATA:cpuname};%{DATA:cpuid};%{DATA:osname};%{DATA:iplist};%{DATA:maclist};%{DATA:hdid};%{DATA:biosver};%{DATA:tdxguid};)?%{GREEDYDATA:other}$" ]
        remove_field => [ "msg" ]
      }
      cidr {
        address => ["%{clientip}"]
        network_path => "/etc/logstash/ip-ali-cidr.txt"
        add_tag => ["aliyun"]
      }
    } else if [reqstr] == "(0-100)客户校验(*)" {
      grok {
        match => ["msg","^来源:%{DATA} %{DATA:loginid}\|%{DATA}\|%{DATA}\|%{DATA:logintype}\|%{DATA}\|%{DATA:clitype}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:txmm}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:reconflag}\|%{DATA}\|%{DATA:vipflag}\|%{DATA:pcinfo}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:verinfo}\|%{GREEDYDATA:other}$" ]
        match => ["msg","^%{DATA:loginid}\|%{DATA}\|%{DATA}\|%{DATA:logintype}\|%{DATA}\|%{DATA:clitype}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:txmm}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:reconflag}\|%{DATA}\|%{DATA:vipflag}\|%{DATA:pcinfo}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:verinfo}\|%{GREEDYDATA:other}$" ]
        remove_field => [ "msg" ]
      }
      # 解 pcinfo
      if [pcinfo] {
        grok {
          match => ["pcinfo","^%{DATA:innerip};%{DATA:pcname};%{DATA:osusername};%{DATA:memsize};%{DATA:cpuname};%{DATA:cpuid};%{DATA:osname};%{DATA:iplist};%{DATA:maclist};%{DATA:hdid};%{DATA:biosver};%{DATA:tdxguid};%{GREEDYDATA:pclast}$"]
          remove_field => [ "pcinfo" ]
        }
      }
      # 解 verinfo
      if [verinfo] {
        grok {
          match => ["verinfo","^%{NUMBER:cliver:float},?%{GREEDYDATA}$"]
        }
      }
    } else if [reqstr] == "(0-202)普通股票委托(*)" {
      # 解委托请求的msg
      if [yybname] == "期货" {
        grok {
          match => ["msg","^%{USERNAME:loginid}\|%{DATA}\|%{DATA:zjzh}\|%{WORD:zhlb}\|(%{USERNAME:gddm})?\|%{WORD:wtqd}\|(%{WORD:mmbz})?\|\|\|(%{DATA:wtdm})?\|(%{NUMBER:wtjg:float})?\|(%{DATA:jydw})?\|(%{NUMBER:wtsl:int})?\|(%{DATA:wtfs})?\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:xiwei}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|(%{DATA:wtcpbz})?\|%{GREEDYDATA:wtother}$"]
          remove_field => [ "msg" ]
        }
      } else {
      grok {
        # 支持新tc50日志格式
        match => ["msg","^来源:%{NOTSPACE} %{USERNAME:loginid}\|%{DATA}\|%{DATA:zjzh}\|%{WORD:zhlb}\|(%{USERNAME:gddm})?\|%{WORD:wtqd}\|(%{WORD:mmbz})?\|(%{DATA:txMM})?\|\|(%{DATA:wtdm})?\|(%{NUMBER:wtjg:float})?\|(%{DATA:jydw})?\|(%{NUMBER:wtsl:int})?\|(%{DATA:wtfs})?\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|(%{DATA:wtcpbz})?\|%{GREEDYDATA:wtother}$"]
        match => ["msg","^%{USERNAME:loginid}\|%{DATA}\|%{DATA:zjzh}\|%{WORD:zhlb}\|(%{USERNAME:gddm})?\|%{WORD:wtqd}\|(%{WORD:mmbz})?\|\|\|(%{DATA:wtdm})?\|(%{NUMBER:wtjg:float})?\|(%{DATA:jydw})?\|(%{NUMBER:wtsl:int})?\|(%{DATA:wtfs})?\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|(%{DATA:wtcpbz})?\|%{GREEDYDATA:wtother}$"]
        remove_field => [ "msg" ]
        }
      }
      translate {
        field => "[mmbz]"
        destination => "[mmbz]"
        override => "true"
        dictionary => [ "0", "买", "1", "卖", "67", "市价买", "68", "市价卖", "58", "新股申购", "96", "新股资金冻结","87","股转协转成交确认买","88","股转协转成交确认卖","84","股转定价申报买","85","股转定价申报卖","45","场内货币基金申购","46","场内货币基金赎回","12","场内基金合并","13","场内基金分拆","19","融资回购","20","融券回购","79","场内基金申购","80","场内基金赎回","81","场内基金认购","86","权证行权","91","股转互报成交确认买","92","股转互报成交确认卖","47","自主行权","49","融资行权现金还款","69","融资买入","70","融券卖出","76","卖券还款","75","现金还款还息","71","买券还券","73","卖券还券","74","担保品划转" ]
      }
      cidr {
        address => ["%{clientip}"]
        network_path => "/etc/logstash/ip-ali-cidr.txt"
        add_tag => ["aliyun"]
      }
    } else if [reqstr] == "(0-1384)CDR业务操作(*)" {
      grok {
        match => ["msg","^来源:%{DATA} %{USERNAME:loginid}\|%{DATA}\|%{DATA:zjzh}\|%{WORD:zhlb}\|(%{USERNAME:gddm})?\|%{WORD:wtqd}\|(%{WORD})?\|(%{DATA:wtdm})?\|(%{DATA})?\|(%{DATA})?\|(%{DATA})?\|(%{DATA})?\|(%{DATA:mmbz})?\|(%{DATA})?\|%{DATA:wtjg}\|%{DATA:wtsl}\|%{GREEDYDATA:wtother}$"]
        tag_on_failure => [ "_grok_kcbcdr_nomatch" ]
        remove_field => [ "msg" ]
      }
      translate {
        field => "[mmbz]"
        destination => "[mmbz]"
        override => "true"
        dictionary => [ "PC.Stock.Sell","科创卖","PC.Stock.Buy","科创买","PC.Stock.Kcb_phdjmr","盘后买","PC.Stock.Kcb_phdjmc","盘后卖","PC.Stock.singlexgsg","新股申","PC.Stock.singlexgsgcombo","新股申2","PC.Stock.wtcd","科创撤","PC.Stock.drwtcx","委托查询","PC.LevinBuy","科闪买","PC.LevinSell","科闪卖","PC.Stock.Xgsg_kcb","新股申科" ]
      }
      cidr {
        address => ["%{clientip}"]
        network_path => "/etc/logstash/ip-ali-cidr.txt"
        add_tag => ["aliyun"]
      }
    } else if [reqstr] == "(0-2100)开放式基金委托(*)" {
        grok {
          # 支持新tc50日志格式
          match => ["msg","^(来源:%{DATA} )?%{USERNAME:loginid}\|%{DATA}\|%{DATA:zjzh}\|\|\|%{WORD:wtqd}\|(%{WORD:tacode})?\|(%{DATA:jjzh})?\|(%{BASE16NUM:wtdm})?\|(%{DATA:mmbz})?\|(%{DATA:jyje})?\|(%{DATA:jjfe})?\|%{GREEDYDATA}$"]
          tag_on_failure => [ "_grok_kfjj_nomatch" ]
          remove_field => [ "msg" ]
        }
    
      translate {
        field => "[mmbz]"
        destination => "[mmbz]"
        override => "true"
        dictionary => [ "0","认购","1","申购","2","赎回","3","预约申购","4","预约赎回","5","定期申购","6","预约认购" ]
      }
    } else if [reqstr] == "(0-1450)沪港通业务操作(*)" {
      grok {
        # 港股通交易，新tc50日志格式的另一种写法 (来源:0.0.0 )?
        match => ["msg","^(来源:%{DATA} )?%{DATA:loginid}\|%{DATA}\|(%{DATA:zjzh})?\|(%{DATA:zhlb})?\|(%{DATA:gddm})?\|%{DATA:wtfs}\|%{DATA:czfs}\|(%{DATA:mmbz})?\|%{DATA}\|%{DATA:wtlx}\|\|\|\|(%{DATA:wtdm})?\|(%{DATA:wtjg:float})?\|(%{DATA})?\|(%{DATA:wtsl:int})?\|%{GREEDYDATA:wtother}$"]
        remove_field => [ "msg" ]
      }
      if [zhlb] == "41" {
        # 深港通
        translate {
          field => "[mmbz]"
          destination => "[mmbz]"
          override => "true"
          dictionary => [ "0", "深港通买", "1", "深港通卖", "2" , "撤单" , "3" ,"撤买" , "4" , "撤卖"]
        }
      } else if [zhlb] == "40" {
        # 沪港通
        translate {
          field => "[mmbz]"
          destination => "[mmbz]"
          override => "true"
          dictionary => [ "0", "沪港通买", "1", "沪港通卖", "2" , "撤单" , "3" ,"撤买" , "4" , "撤卖"]
        }
      }
    } else if [reqstr] == "(0-200)委托撤单(*)" {
      grok {
        match => ["msg","^(来源:%{DATA} )?%{DATA:loginid}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:wtdm}\|%{DATA}?\|%{DATA:wtid}\|%{GREEDYDATA}\|%{DATA:cliver:float}\|%{DATA}\|%{DATA:TERMCODE}\|$"]
        # match => ["msg","^(来源:%{DATA} )?%{DATA:loginid}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA}\|%{DATA:wtdm}\|%{DATA}?\|%{DATA:wtid}\|%{GREEDYDATA}\|%{DATA:cliver:float}\|$"]
        match => ["msg","^(来源:%{DATA} )?%{DATA:loginid}\|%{GREEDYDATA}\|%{DATA:cliver:float}\|$"]
        remove_field => [ "msg" ]
      }
    } else if [reqstr] == "(0-110)计算可买(卖)数(*)" {
      grok {
        match => ["msg","^来源:%{DATA} %{USERNAME:loginid}\|%{DATA}\|%{DATA:zjzh}\|%{WORD}\|(%{WORD})?\|(%{WORD})?\|(%{WORD:wtdm})?\|(%{DATA:mmbz})\|(%{DATA:wtjg})\|%{GREEDYDATA}$"]
        remove_field => [ "msg" ]
      }
    } else {
      mutate { remove_field => ["msg"]} # "功能请求"删除不需要分解的msg
    }  # end "功能请求"
  } else if [logwhat] == "成功处理" {
    grok {
      match => ["msg","^IP:%{IP:clientip} MAC:%{DATA:mac} 线程:%{DATA:xiancheng} 通道ID:%{INT:tdid} 事务ID:%{INT:swid} 请求:%{NOTSPACE:reqstr} 营业部:\(%{INT:yybid}\)%{DATA:yybname} 耗时A:%{INT:etime:int} 耗时B:%{INT:etimeB:int} 排队:%{INT:pdtime:int} %{GREEDYDATA:msg}$" ]
      overwrite => [ "msg" ]
      remove_field => [ "msg" ]
    }
  } else if [logwhat] == "调用失败" {
    grok {
      match => ["msg","^IP:%{IP:clientip} MAC:%{NOTSPACE:mac} 线程:%{NOTSPACE:xiancheng} 通道ID:%{INT:tdid} 事务ID:%{INT:swid} 请求:%{NOTSPACE:reqstr} 营业部:\(%{INT:yybid}\)%{DATA:yybname} 耗时A:%{INT:etime:int} 耗时B:%{INT:etimeB:int} 排队:%{INT:pdtime:int} %{GREEDYDATA:msg}$" ]
      overwrite => [ "msg" ]
    }

    if [reqstr] in ["(0-98)集成客户校验(*)","(0-100)客户校验(*)"] {
      grok {
        match => ["msg","^%{DATA}\|%{DATA:msg}\|"] # 去掉前面的|和后面的0|||
        overwrite => [ "msg" ]
        add_field => { "lookout" => "_登录失败_" }
      }
      if [msg] =~ /^\(102068\)网关/ {
      # "(102068)网关:账户被锁定，请等待[2]秒" 变为 "(102068)网关:账户被锁定"
        grok {
          match => ["msg","^%{DATA:msg}，"]
          overwrite => ["msg"]
        }
      }
      if [msg] =~ /^\(107532\)网关/ {
      # 去掉(107532)
        grok {
          match => ["msg","^\(107532\)%{DATA:msg}$"]
          overwrite => ["msg"]
        }
      }
    } else {
      grok {
        match => ["msg","^%{DATA}\|%{DATA:msg}\|"] # 去掉前面的|和后面的0|||
        overwrite => [ "msg" ]
      }

      # remove errnum
      grok {
        match => [ "msg" , "^\(?(?:%{NUMBER})?\)?(?:网关:)?%{GREEDYDATA:msg}$" ]
        overwrite => [ "msg" ]
        # tag_on_failure => [ "_grokfailure_delerrnum"]
      }

      if [msg] =~ /^应用接入网关正式版/ { # 此错误msg太长，截断后面的
        grok {
          match => ["msg","^%{DATA:msg},%{DATA}$"]
          match => ["msg","^%{DATA:msg}\(4\)%{DATA}$"]
          overwrite => ["msg"]
        }
      }
    }
  } else if [logwhat] == "协议异常" {
    grok { # 最后的\[是截断异常日志
      match => ["msg","^IP:%{IP:clientip} MAC:%{NOTSPACE:mac} 线程:%{NOTSPACE:xiancheng} 通道ID:%{INT:tdid} 事务ID:%{INT:swid} 请求:%{NOTSPACE:reqstr} 营业部:\(%{INT:yybid}\)%{DATA:yybname} 耗时A:%{INT:etime:int} 耗时B:%{INT:etimeB:int} 排队:%{INT:pdtime:int} %{NOTSPACE:msg}\[" ]
      overwrite => [ "msg" ]
    }
  }
  
## redis来的数据，没有host，故手工加上
#  if ![host] {
#    if [beat][hostname] {
#      mutate {
#        add_field => { "host" => "%{[beat][hostname]}" }
#      }
#    }
#  }

  mutate {
    remove_field => [ "input_type","offset","logdate","logtime","etimeB" ]
    remove_tag => [ "beats_input_codec_plain_applied" ]
  }
  }
} # end filter

